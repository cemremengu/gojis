package main

import (
	"go/ast"
	"io/ioutil"
	"log"
	"path"
	"strings"

	. "github.com/dave/jennifer/jen"
)

const (
	headerComment = "Code generated by \"aststring\"; DO NOT EDIT."
	indentPrefix  = "  "
	parOpen       = "("
	parClose      = ")"
)

func generate(fpath string, structs []*StructDecl) {
	if len(structs) == 0 {
		// no-op if no structs in file
		return
	}

	filename := fpath + "/ast"
	f := NewFilePath(filename)
	f.PackageComment(headerComment)

	for _, structDecl := range structs {
		var calls []Code

		calls = append(calls, Var().Id("buf").Qual("bytes", "Buffer"))
		calls = append(calls, Id("buf").Dot("WriteString").Call(Lit(structDecl.name+" "+parOpen)))
		calls = append(calls, Id("buf").Dot("WriteString").Call(Lit("\n")))

		for _, field := range structDecl.structType.Fields.List {
			switch field.Type.(type) {
			case *ast.StarExpr:
				for _, fieldName := range field.Names {
					calls = append(
						calls,
						If(
							Id("node").
								Dot(fieldName.Name).
								Op("!=").
								Nil(),
						).Block(
							Id("buf").
								Dot("WriteString").
								Call(
									Qual(filename, "PrefixToString").
										Call(
											Id("node").
												Dot(fieldName.Name).
												Dot("String").
												Call(),
											Lit(indentPrefix),
										),
								),
						),
					)
				}
			case *ast.Ident:
				for _, fieldName := range field.Names {
					calls = append(
						calls,
						Id("buf").
							Dot("WriteString").
							Call(
								Qual(filename, "PrefixToString").
									Call(
										Qual("fmt", "Sprintf").
											Call(
												Lit("%v: %v"),
												Lit(fieldName.Name),
												Id("node").
													Dot(fieldName.Name),
											),
										Lit(indentPrefix),
									),
							),
					)
					calls = append(calls, Id("buf").Dot("WriteString").Call(Lit("\n")))
				}
			case *ast.ArrayType:
				for _, fieldName := range field.Names {
					calls = append(
						calls,
						For(List(Id("_"), Id("elem")).Op(":=").Range().Id("node").Dot(fieldName.Name)).
							Block(
								Id("buf").
									Dot("WriteString").
									Call(
										Qual(filename, "PrefixToString").
											Call(
												Id("elem").
													Dot("String").
													Call(),
												Lit(indentPrefix),
											),
									),
							),
					)
				}
			}
		}

		calls = append(calls, Id("buf").Dot("WriteString").Call(Lit(parClose)))
		calls = append(calls, Id("buf").Dot("WriteString").Call(Lit("\n")))
		calls = append(calls, Return(Id("buf").Dot("String").Call()))

		f.Func().
			Params(
				Id("node").Id("*" + structDecl.name),
			).
			Id("String").
			Params().
			String().
			Block(calls...)

		f.Line()
	}

	outputFile := strings.TrimSuffix(fpath, path.Ext(fpath)) + "_string.go"
	err := ioutil.WriteFile(outputFile, []byte(f.GoString()), 0666)
	if err != nil {
		log.Fatalf("write file: %v", err)
	}
}
