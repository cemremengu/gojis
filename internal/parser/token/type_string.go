// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[LineTerminator-1]
	_ = x[Whitespace-2]
	_ = x[MultiLineComment-3]
	_ = x[SingleLineComment-4]
	_ = x[CommonToken-5]
	_ = x[IdentifierName-6]
	_ = x[Punctuator-7]
	_ = x[NumericLiteral-8]
	_ = x[StringLiteral-9]
	_ = x[Template-10]
	_ = x[Await-11]
	_ = x[Break-12]
	_ = x[Case-13]
	_ = x[Catch-14]
	_ = x[Class-15]
	_ = x[Const-16]
	_ = x[Continue-17]
	_ = x[Debugger-18]
	_ = x[Default-19]
	_ = x[Delete-20]
	_ = x[Do-21]
	_ = x[Else-22]
	_ = x[Export-23]
	_ = x[Extends-24]
	_ = x[Finally-25]
	_ = x[For-26]
	_ = x[Function-27]
	_ = x[If-28]
	_ = x[Import-29]
	_ = x[In-30]
	_ = x[Instanceof-31]
	_ = x[New_-32]
	_ = x[Return-33]
	_ = x[Super-34]
	_ = x[Switch-35]
	_ = x[This-36]
	_ = x[Throw-37]
	_ = x[Try-38]
	_ = x[Typeof-39]
	_ = x[Var-40]
	_ = x[Void-41]
	_ = x[While-42]
	_ = x[With-43]
	_ = x[Yield-44]
	_ = x[Null-45]
	_ = x[Boolean-46]
	_ = x[DecimalLiteral-47]
	_ = x[BinaryIntegerLiteral-48]
	_ = x[OctalIntegerLiteral-49]
	_ = x[HexIntegerLiteral-50]
	_ = x[RegularExpressionLiteral-51]
	_ = x[Target-52]
	_ = x[AndAssign-53]
	_ = x[Arrow-54]
	_ = x[Assign-55]
	_ = x[BitwiseAnd-56]
	_ = x[BitwiseNot-57]
	_ = x[BitwiseOr-58]
	_ = x[BitwiseXor-59]
	_ = x[BraceClose-60]
	_ = x[BraceOpen-61]
	_ = x[BracketClose-62]
	_ = x[BracketOpen-63]
	_ = x[Colon-64]
	_ = x[Comma-65]
	_ = x[Div-66]
	_ = x[DivAssign-67]
	_ = x[Dot-68]
	_ = x[Ellipsis-69]
	_ = x[Equals-70]
	_ = x[GreaterThan-71]
	_ = x[GreaterThanOrEqualTo-72]
	_ = x[LeftShift-73]
	_ = x[LeftShiftAssign-74]
	_ = x[LessThan-75]
	_ = x[LessThanOrEqualTo-76]
	_ = x[LogicalAnd-77]
	_ = x[LogicalNot-78]
	_ = x[LogicalOr-79]
	_ = x[Minus-80]
	_ = x[MinusAssign-81]
	_ = x[Modulo-82]
	_ = x[ModuloAssign-83]
	_ = x[Multiply-84]
	_ = x[MultiplyAssign-85]
	_ = x[NotEquals-86]
	_ = x[OrAssign-87]
	_ = x[ParClose-88]
	_ = x[ParOpen-89]
	_ = x[Plus-90]
	_ = x[PlusAssign-91]
	_ = x[Power-92]
	_ = x[PowerAssign-93]
	_ = x[QuestionMark-94]
	_ = x[RightShift-95]
	_ = x[RightShiftAssign-96]
	_ = x[SemiColon-97]
	_ = x[StrictEquals-98]
	_ = x[StrictNotEquals-99]
	_ = x[Tilde-100]
	_ = x[UnsignedRightShift-101]
	_ = x[UnsignedRightShiftAssign-102]
	_ = x[UpdateMinus-103]
	_ = x[UpdatePlus-104]
	_ = x[XorAssign-105]
}

const _Type_name = "UnknownLineTerminatorWhitespaceMultiLineCommentSingleLineCommentCommonTokenIdentifierNamePunctuatorNumericLiteralStringLiteralTemplateAwaitBreakCaseCatchClassConstContinueDebuggerDefaultDeleteDoElseExportExtendsFinallyForFunctionIfImportInInstanceofNew_ReturnSuperSwitchThisThrowTryTypeofVarVoidWhileWithYieldNullBooleanDecimalLiteralBinaryIntegerLiteralOctalIntegerLiteralHexIntegerLiteralRegularExpressionLiteralTargetAndAssignArrowAssignBitwiseAndBitwiseNotBitwiseOrBitwiseXorBraceCloseBraceOpenBracketCloseBracketOpenColonCommaDivDivAssignDotEllipsisEqualsGreaterThanGreaterThanOrEqualToLeftShiftLeftShiftAssignLessThanLessThanOrEqualToLogicalAndLogicalNotLogicalOrMinusMinusAssignModuloModuloAssignMultiplyMultiplyAssignNotEqualsOrAssignParCloseParOpenPlusPlusAssignPowerPowerAssignQuestionMarkRightShiftRightShiftAssignSemiColonStrictEqualsStrictNotEqualsTildeUnsignedRightShiftUnsignedRightShiftAssignUpdateMinusUpdatePlusXorAssign"

var _Type_index = [...]uint16{0, 7, 21, 31, 47, 64, 75, 89, 99, 113, 126, 134, 139, 144, 148, 153, 158, 163, 171, 179, 186, 192, 194, 198, 204, 211, 218, 221, 229, 231, 237, 239, 249, 253, 259, 264, 270, 274, 279, 282, 288, 291, 295, 300, 304, 309, 313, 320, 334, 354, 373, 390, 414, 420, 429, 434, 440, 450, 460, 469, 479, 489, 498, 510, 521, 526, 531, 534, 543, 546, 554, 560, 571, 591, 600, 615, 623, 640, 650, 660, 669, 674, 685, 691, 703, 711, 725, 734, 742, 750, 757, 761, 771, 776, 787, 799, 809, 825, 834, 846, 861, 866, 884, 908, 919, 929, 938}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
