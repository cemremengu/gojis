// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[LineTerminator-1]
	_ = x[Whitespace-2]
	_ = x[MultiLineComment-3]
	_ = x[SingleLineComment-4]
	_ = x[CommonToken-5]
	_ = x[IdentifierName-6]
	_ = x[Punctuator-7]
	_ = x[NumericLiteral-8]
	_ = x[StringLiteral-9]
	_ = x[Template-10]
	_ = x[ReservedWord-11]
	_ = x[Null-12]
	_ = x[Boolean-13]
	_ = x[DecimalLiteral-14]
	_ = x[BinaryIntegerLiteral-15]
	_ = x[OctalIntegerLiteral-16]
	_ = x[HexIntegerLiteral-17]
	_ = x[Yield-18]
	_ = x[Await-19]
	_ = x[This-20]
	_ = x[NewType-21]
	_ = x[Super-22]
	_ = x[Target-23]
	_ = x[Delete-24]
	_ = x[Void-25]
	_ = x[Typeof-26]
	_ = x[UnsignedRightShiftAssign-27]
	_ = x[Ellipsis-28]
	_ = x[LeftShiftAssign-29]
	_ = x[UnsignedRightShift-30]
	_ = x[RightShiftAssign-31]
	_ = x[StrictEquals-32]
	_ = x[StrictNotEquals-33]
	_ = x[PowerAssign-34]
	_ = x[LeftShift-35]
	_ = x[LessThanOrEqualTo-36]
	_ = x[RightShift-37]
	_ = x[GreaterThanOrEqualTo-38]
	_ = x[Equals-39]
	_ = x[NotEquals-40]
	_ = x[UpdatePlus-41]
	_ = x[UpdateMinus-42]
	_ = x[Power-43]
	_ = x[LogicalAnd-44]
	_ = x[LogicalOr-45]
	_ = x[PlusAssign-46]
	_ = x[MinusAssign-47]
	_ = x[MultiplyAssign-48]
	_ = x[ModuloAssign-49]
	_ = x[AndAssign-50]
	_ = x[OrAssign-51]
	_ = x[XorAssign-52]
	_ = x[Arrow-53]
	_ = x[GreaterThan-54]
	_ = x[Dot-55]
	_ = x[SemiColon-56]
	_ = x[Comma-57]
	_ = x[Tilde-58]
	_ = x[LessThan-59]
	_ = x[ParOpen-60]
	_ = x[ParClose-61]
	_ = x[BraceOpen-62]
	_ = x[BraceClose-63]
	_ = x[BracketOpen-64]
	_ = x[BracketClose-65]
	_ = x[LogicalNot-66]
	_ = x[Plus-67]
	_ = x[Minus-68]
	_ = x[Multiply-69]
	_ = x[Modulo-70]
	_ = x[BitwiseAnd-71]
	_ = x[BitwiseOr-72]
	_ = x[BitwiseXor-73]
	_ = x[BitwiseNot-74]
	_ = x[QuestionMark-75]
	_ = x[Colon-76]
	_ = x[Assign-77]
	_ = x[DivAssign-78]
	_ = x[Div-79]
}

const _Type_name = "UnknownLineTerminatorWhitespaceMultiLineCommentSingleLineCommentCommonTokenIdentifierNamePunctuatorNumericLiteralStringLiteralTemplateReservedWordNullBooleanDecimalLiteralBinaryIntegerLiteralOctalIntegerLiteralHexIntegerLiteralYieldAwaitThisNewTypeSuperTargetDeleteVoidTypeofUnsignedRightShiftAssignEllipsisLeftShiftAssignUnsignedRightShiftRightShiftAssignStrictEqualsStrictNotEqualsPowerAssignLeftShiftLessThanOrEqualToRightShiftGreaterThanOrEqualToEqualsNotEqualsUpdatePlusUpdateMinusPowerLogicalAndLogicalOrPlusAssignMinusAssignMultiplyAssignModuloAssignAndAssignOrAssignXorAssignArrowGreaterThanDotSemiColonCommaTildeLessThanParOpenParCloseBraceOpenBraceCloseBracketOpenBracketCloseLogicalNotPlusMinusMultiplyModuloBitwiseAndBitwiseOrBitwiseXorBitwiseNotQuestionMarkColonAssignDivAssignDiv"

var _Type_index = [...]uint16{0, 7, 21, 31, 47, 64, 75, 89, 99, 113, 126, 134, 146, 150, 157, 171, 191, 210, 227, 232, 237, 241, 248, 253, 259, 265, 269, 275, 299, 307, 322, 340, 356, 368, 383, 394, 403, 420, 430, 450, 456, 465, 475, 486, 491, 501, 510, 520, 531, 545, 557, 566, 574, 583, 588, 599, 602, 611, 616, 621, 629, 636, 644, 653, 663, 674, 686, 696, 700, 705, 713, 719, 729, 738, 748, 758, 770, 775, 781, 790, 793}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
