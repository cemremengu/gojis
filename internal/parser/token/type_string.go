// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[LineTerminator-1]
	_ = x[Whitespace-2]
	_ = x[MultiLineComment-3]
	_ = x[SingleLineComment-4]
	_ = x[CommonToken-5]
	_ = x[IdentifierName-6]
	_ = x[Punctuator-7]
	_ = x[NumericLiteral-8]
	_ = x[StringLiteral-9]
	_ = x[Template-10]
	_ = x[Async-11]
	_ = x[Let-12]
	_ = x[Await-13]
	_ = x[Break-14]
	_ = x[Case-15]
	_ = x[Catch-16]
	_ = x[Class-17]
	_ = x[Const-18]
	_ = x[Continue-19]
	_ = x[Debugger-20]
	_ = x[Default-21]
	_ = x[Delete-22]
	_ = x[Do-23]
	_ = x[Else-24]
	_ = x[Export-25]
	_ = x[Extends-26]
	_ = x[Finally-27]
	_ = x[For-28]
	_ = x[Function-29]
	_ = x[If-30]
	_ = x[Import-31]
	_ = x[In-32]
	_ = x[Instanceof-33]
	_ = x[New_-34]
	_ = x[Return-35]
	_ = x[Super-36]
	_ = x[Switch-37]
	_ = x[This-38]
	_ = x[Throw-39]
	_ = x[Try-40]
	_ = x[Typeof-41]
	_ = x[Var-42]
	_ = x[Void-43]
	_ = x[While-44]
	_ = x[With-45]
	_ = x[Yield-46]
	_ = x[Enum-47]
	_ = x[Implements-48]
	_ = x[Package-49]
	_ = x[Protected-50]
	_ = x[Interface-51]
	_ = x[Private-52]
	_ = x[Public-53]
	_ = x[Null-54]
	_ = x[Boolean-55]
	_ = x[DecimalLiteral-56]
	_ = x[BinaryIntegerLiteral-57]
	_ = x[OctalIntegerLiteral-58]
	_ = x[HexIntegerLiteral-59]
	_ = x[RegularExpressionLiteral-60]
	_ = x[Target-61]
	_ = x[AndAssign-62]
	_ = x[Arrow-63]
	_ = x[Assign-64]
	_ = x[BitwiseAnd-65]
	_ = x[BitwiseNot-66]
	_ = x[BitwiseOr-67]
	_ = x[BitwiseXor-68]
	_ = x[BraceClose-69]
	_ = x[BraceOpen-70]
	_ = x[BracketClose-71]
	_ = x[BracketOpen-72]
	_ = x[Colon-73]
	_ = x[Comma-74]
	_ = x[Div-75]
	_ = x[DivAssign-76]
	_ = x[Dot-77]
	_ = x[Ellipsis-78]
	_ = x[Equals-79]
	_ = x[GreaterThan-80]
	_ = x[GreaterThanOrEqualTo-81]
	_ = x[LeftShift-82]
	_ = x[LeftShiftAssign-83]
	_ = x[LessThan-84]
	_ = x[LessThanOrEqualTo-85]
	_ = x[LogicalAnd-86]
	_ = x[LogicalNot-87]
	_ = x[LogicalOr-88]
	_ = x[Minus-89]
	_ = x[MinusAssign-90]
	_ = x[Modulo-91]
	_ = x[ModuloAssign-92]
	_ = x[Multiply-93]
	_ = x[MultiplyAssign-94]
	_ = x[NotEquals-95]
	_ = x[OrAssign-96]
	_ = x[ParClose-97]
	_ = x[ParOpen-98]
	_ = x[Plus-99]
	_ = x[PlusAssign-100]
	_ = x[Power-101]
	_ = x[PowerAssign-102]
	_ = x[QuestionMark-103]
	_ = x[RightShift-104]
	_ = x[RightShiftAssign-105]
	_ = x[SemiColon-106]
	_ = x[StrictEquals-107]
	_ = x[StrictNotEquals-108]
	_ = x[Tilde-109]
	_ = x[UnsignedRightShift-110]
	_ = x[UnsignedRightShiftAssign-111]
	_ = x[UpdateMinus-112]
	_ = x[UpdatePlus-113]
	_ = x[XorAssign-114]
}

const _Type_name = "UnknownLineTerminatorWhitespaceMultiLineCommentSingleLineCommentCommonTokenIdentifierNamePunctuatorNumericLiteralStringLiteralTemplateAsyncLetAwaitBreakCaseCatchClassConstContinueDebuggerDefaultDeleteDoElseExportExtendsFinallyForFunctionIfImportInInstanceofNew_ReturnSuperSwitchThisThrowTryTypeofVarVoidWhileWithYieldEnumImplementsPackageProtectedInterfacePrivatePublicNullBooleanDecimalLiteralBinaryIntegerLiteralOctalIntegerLiteralHexIntegerLiteralRegularExpressionLiteralTargetAndAssignArrowAssignBitwiseAndBitwiseNotBitwiseOrBitwiseXorBraceCloseBraceOpenBracketCloseBracketOpenColonCommaDivDivAssignDotEllipsisEqualsGreaterThanGreaterThanOrEqualToLeftShiftLeftShiftAssignLessThanLessThanOrEqualToLogicalAndLogicalNotLogicalOrMinusMinusAssignModuloModuloAssignMultiplyMultiplyAssignNotEqualsOrAssignParCloseParOpenPlusPlusAssignPowerPowerAssignQuestionMarkRightShiftRightShiftAssignSemiColonStrictEqualsStrictNotEqualsTildeUnsignedRightShiftUnsignedRightShiftAssignUpdateMinusUpdatePlusXorAssign"

var _Type_index = [...]uint16{0, 7, 21, 31, 47, 64, 75, 89, 99, 113, 126, 134, 139, 142, 147, 152, 156, 161, 166, 171, 179, 187, 194, 200, 202, 206, 212, 219, 226, 229, 237, 239, 245, 247, 257, 261, 267, 272, 278, 282, 287, 290, 296, 299, 303, 308, 312, 317, 321, 331, 338, 347, 356, 363, 369, 373, 380, 394, 414, 433, 450, 474, 480, 489, 494, 500, 510, 520, 529, 539, 549, 558, 570, 581, 586, 591, 594, 603, 606, 614, 620, 631, 651, 660, 675, 683, 700, 710, 720, 729, 734, 745, 751, 763, 771, 785, 794, 802, 810, 817, 821, 831, 836, 847, 859, 869, 885, 894, 906, 921, 926, 944, 968, 979, 989, 998}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
