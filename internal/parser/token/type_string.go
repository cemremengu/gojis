// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[LineTerminator-1]
	_ = x[Whitespace-2]
	_ = x[MultiLineComment-3]
	_ = x[SingleLineComment-4]
	_ = x[CommonToken-5]
	_ = x[IdentifierName-6]
	_ = x[Punctuator-7]
	_ = x[StringLiteral-8]
	_ = x[TemplateHead-9]
	_ = x[NoSubstitutionTemplate-10]
	_ = x[Async-11]
	_ = x[Let-12]
	_ = x[Await-13]
	_ = x[Break-14]
	_ = x[Case-15]
	_ = x[Catch-16]
	_ = x[Class-17]
	_ = x[Const-18]
	_ = x[Continue-19]
	_ = x[Debugger-20]
	_ = x[Default-21]
	_ = x[Delete-22]
	_ = x[Do-23]
	_ = x[Else-24]
	_ = x[Export-25]
	_ = x[Extends-26]
	_ = x[Finally-27]
	_ = x[For-28]
	_ = x[Function-29]
	_ = x[If-30]
	_ = x[Import-31]
	_ = x[In-32]
	_ = x[Instanceof-33]
	_ = x[New_-34]
	_ = x[Return-35]
	_ = x[Static-36]
	_ = x[Super-37]
	_ = x[Switch-38]
	_ = x[This-39]
	_ = x[Throw-40]
	_ = x[Try-41]
	_ = x[Typeof-42]
	_ = x[Var-43]
	_ = x[Void-44]
	_ = x[While-45]
	_ = x[With-46]
	_ = x[Yield-47]
	_ = x[Enum-48]
	_ = x[Implements-49]
	_ = x[Package-50]
	_ = x[Protected-51]
	_ = x[Interface-52]
	_ = x[Private-53]
	_ = x[Public-54]
	_ = x[Null-55]
	_ = x[Boolean-56]
	_ = x[DecimalLiteral-57]
	_ = x[BinaryIntegerLiteral-58]
	_ = x[OctalIntegerLiteral-59]
	_ = x[HexIntegerLiteral-60]
	_ = x[RegularExpressionLiteral-61]
	_ = x[Target-62]
	_ = x[AndAssign-63]
	_ = x[Arrow-64]
	_ = x[Assign-65]
	_ = x[BitwiseAnd-66]
	_ = x[BitwiseNot-67]
	_ = x[BitwiseOr-68]
	_ = x[BitwiseXor-69]
	_ = x[BraceClose-70]
	_ = x[BraceOpen-71]
	_ = x[BracketClose-72]
	_ = x[BracketOpen-73]
	_ = x[Colon-74]
	_ = x[Comma-75]
	_ = x[Div-76]
	_ = x[DivAssign-77]
	_ = x[Dot-78]
	_ = x[Ellipsis-79]
	_ = x[Equals-80]
	_ = x[GreaterThan-81]
	_ = x[GreaterThanOrEqualTo-82]
	_ = x[LeftShift-83]
	_ = x[LeftShiftAssign-84]
	_ = x[LessThan-85]
	_ = x[LessThanOrEqualTo-86]
	_ = x[LogicalAnd-87]
	_ = x[LogicalNot-88]
	_ = x[LogicalOr-89]
	_ = x[Minus-90]
	_ = x[MinusAssign-91]
	_ = x[Modulo-92]
	_ = x[ModuloAssign-93]
	_ = x[Multiply-94]
	_ = x[MultiplyAssign-95]
	_ = x[NotEquals-96]
	_ = x[OrAssign-97]
	_ = x[ParClose-98]
	_ = x[ParOpen-99]
	_ = x[Plus-100]
	_ = x[PlusAssign-101]
	_ = x[Power-102]
	_ = x[PowerAssign-103]
	_ = x[QuestionMark-104]
	_ = x[RightShift-105]
	_ = x[RightShiftAssign-106]
	_ = x[SemiColon-107]
	_ = x[StrictEquals-108]
	_ = x[StrictNotEquals-109]
	_ = x[Tilde-110]
	_ = x[UnsignedRightShift-111]
	_ = x[UnsignedRightShiftAssign-112]
	_ = x[UpdateMinus-113]
	_ = x[UpdatePlus-114]
	_ = x[XorAssign-115]
}

const _Type_name = "UnknownLineTerminatorWhitespaceMultiLineCommentSingleLineCommentCommonTokenIdentifierNamePunctuatorStringLiteralTemplateHeadNoSubstitutionTemplateAsyncLetAwaitBreakCaseCatchClassConstContinueDebuggerDefaultDeleteDoElseExportExtendsFinallyForFunctionIfImportInInstanceofNew_ReturnStaticSuperSwitchThisThrowTryTypeofVarVoidWhileWithYieldEnumImplementsPackageProtectedInterfacePrivatePublicNullBooleanDecimalLiteralBinaryIntegerLiteralOctalIntegerLiteralHexIntegerLiteralRegularExpressionLiteralTargetAndAssignArrowAssignBitwiseAndBitwiseNotBitwiseOrBitwiseXorBraceCloseBraceOpenBracketCloseBracketOpenColonCommaDivDivAssignDotEllipsisEqualsGreaterThanGreaterThanOrEqualToLeftShiftLeftShiftAssignLessThanLessThanOrEqualToLogicalAndLogicalNotLogicalOrMinusMinusAssignModuloModuloAssignMultiplyMultiplyAssignNotEqualsOrAssignParCloseParOpenPlusPlusAssignPowerPowerAssignQuestionMarkRightShiftRightShiftAssignSemiColonStrictEqualsStrictNotEqualsTildeUnsignedRightShiftUnsignedRightShiftAssignUpdateMinusUpdatePlusXorAssign"

var _Type_index = [...]uint16{0, 7, 21, 31, 47, 64, 75, 89, 99, 112, 124, 146, 151, 154, 159, 164, 168, 173, 178, 183, 191, 199, 206, 212, 214, 218, 224, 231, 238, 241, 249, 251, 257, 259, 269, 273, 279, 285, 290, 296, 300, 305, 308, 314, 317, 321, 326, 330, 335, 339, 349, 356, 365, 374, 381, 387, 391, 398, 412, 432, 451, 468, 492, 498, 507, 512, 518, 528, 538, 547, 557, 567, 576, 588, 599, 604, 609, 612, 621, 624, 632, 638, 649, 669, 678, 693, 701, 718, 728, 738, 747, 752, 763, 769, 781, 789, 803, 812, 820, 828, 835, 839, 849, 854, 865, 877, 887, 903, 912, 924, 939, 944, 962, 986, 997, 1007, 1016}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
