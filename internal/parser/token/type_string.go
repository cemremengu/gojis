// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[LineTerminator-1]
	_ = x[Whitespace-2]
	_ = x[MultiLineComment-3]
	_ = x[SingleLineComment-4]
	_ = x[CommonToken-5]
	_ = x[IdentifierName-6]
	_ = x[Punctuator-7]
	_ = x[NumericLiteral-8]
	_ = x[StringLiteral-9]
	_ = x[TemplateHead-10]
	_ = x[NoSubstitutionTemplate-11]
	_ = x[Async-12]
	_ = x[Let-13]
	_ = x[Await-14]
	_ = x[Break-15]
	_ = x[Case-16]
	_ = x[Catch-17]
	_ = x[Class-18]
	_ = x[Const-19]
	_ = x[Continue-20]
	_ = x[Debugger-21]
	_ = x[Default-22]
	_ = x[Delete-23]
	_ = x[Do-24]
	_ = x[Else-25]
	_ = x[Export-26]
	_ = x[Extends-27]
	_ = x[Finally-28]
	_ = x[For-29]
	_ = x[Function-30]
	_ = x[If-31]
	_ = x[Import-32]
	_ = x[In-33]
	_ = x[Instanceof-34]
	_ = x[New_-35]
	_ = x[Return-36]
	_ = x[Static-37]
	_ = x[Super-38]
	_ = x[Switch-39]
	_ = x[This-40]
	_ = x[Throw-41]
	_ = x[Try-42]
	_ = x[Typeof-43]
	_ = x[Var-44]
	_ = x[Void-45]
	_ = x[While-46]
	_ = x[With-47]
	_ = x[Yield-48]
	_ = x[Enum-49]
	_ = x[Implements-50]
	_ = x[Package-51]
	_ = x[Protected-52]
	_ = x[Interface-53]
	_ = x[Private-54]
	_ = x[Public-55]
	_ = x[Null-56]
	_ = x[Boolean-57]
	_ = x[DecimalLiteral-58]
	_ = x[BinaryIntegerLiteral-59]
	_ = x[OctalIntegerLiteral-60]
	_ = x[HexIntegerLiteral-61]
	_ = x[RegularExpressionLiteral-62]
	_ = x[Target-63]
	_ = x[AndAssign-64]
	_ = x[Arrow-65]
	_ = x[Assign-66]
	_ = x[BitwiseAnd-67]
	_ = x[BitwiseNot-68]
	_ = x[BitwiseOr-69]
	_ = x[BitwiseXor-70]
	_ = x[BraceClose-71]
	_ = x[BraceOpen-72]
	_ = x[BracketClose-73]
	_ = x[BracketOpen-74]
	_ = x[Colon-75]
	_ = x[Comma-76]
	_ = x[Div-77]
	_ = x[DivAssign-78]
	_ = x[Dot-79]
	_ = x[Ellipsis-80]
	_ = x[Equals-81]
	_ = x[GreaterThan-82]
	_ = x[GreaterThanOrEqualTo-83]
	_ = x[LeftShift-84]
	_ = x[LeftShiftAssign-85]
	_ = x[LessThan-86]
	_ = x[LessThanOrEqualTo-87]
	_ = x[LogicalAnd-88]
	_ = x[LogicalNot-89]
	_ = x[LogicalOr-90]
	_ = x[Minus-91]
	_ = x[MinusAssign-92]
	_ = x[Modulo-93]
	_ = x[ModuloAssign-94]
	_ = x[Multiply-95]
	_ = x[MultiplyAssign-96]
	_ = x[NotEquals-97]
	_ = x[OrAssign-98]
	_ = x[ParClose-99]
	_ = x[ParOpen-100]
	_ = x[Plus-101]
	_ = x[PlusAssign-102]
	_ = x[Power-103]
	_ = x[PowerAssign-104]
	_ = x[QuestionMark-105]
	_ = x[RightShift-106]
	_ = x[RightShiftAssign-107]
	_ = x[SemiColon-108]
	_ = x[StrictEquals-109]
	_ = x[StrictNotEquals-110]
	_ = x[Tilde-111]
	_ = x[UnsignedRightShift-112]
	_ = x[UnsignedRightShiftAssign-113]
	_ = x[UpdateMinus-114]
	_ = x[UpdatePlus-115]
	_ = x[XorAssign-116]
}

const _Type_name = "UnknownLineTerminatorWhitespaceMultiLineCommentSingleLineCommentCommonTokenIdentifierNamePunctuatorNumericLiteralStringLiteralTemplateHeadNoSubstitutionTemplateAsyncLetAwaitBreakCaseCatchClassConstContinueDebuggerDefaultDeleteDoElseExportExtendsFinallyForFunctionIfImportInInstanceofNew_ReturnStaticSuperSwitchThisThrowTryTypeofVarVoidWhileWithYieldEnumImplementsPackageProtectedInterfacePrivatePublicNullBooleanDecimalLiteralBinaryIntegerLiteralOctalIntegerLiteralHexIntegerLiteralRegularExpressionLiteralTargetAndAssignArrowAssignBitwiseAndBitwiseNotBitwiseOrBitwiseXorBraceCloseBraceOpenBracketCloseBracketOpenColonCommaDivDivAssignDotEllipsisEqualsGreaterThanGreaterThanOrEqualToLeftShiftLeftShiftAssignLessThanLessThanOrEqualToLogicalAndLogicalNotLogicalOrMinusMinusAssignModuloModuloAssignMultiplyMultiplyAssignNotEqualsOrAssignParCloseParOpenPlusPlusAssignPowerPowerAssignQuestionMarkRightShiftRightShiftAssignSemiColonStrictEqualsStrictNotEqualsTildeUnsignedRightShiftUnsignedRightShiftAssignUpdateMinusUpdatePlusXorAssign"

var _Type_index = [...]uint16{0, 7, 21, 31, 47, 64, 75, 89, 99, 113, 126, 138, 160, 165, 168, 173, 178, 182, 187, 192, 197, 205, 213, 220, 226, 228, 232, 238, 245, 252, 255, 263, 265, 271, 273, 283, 287, 293, 299, 304, 310, 314, 319, 322, 328, 331, 335, 340, 344, 349, 353, 363, 370, 379, 388, 395, 401, 405, 412, 426, 446, 465, 482, 506, 512, 521, 526, 532, 542, 552, 561, 571, 581, 590, 602, 613, 618, 623, 626, 635, 638, 646, 652, 663, 683, 692, 707, 715, 732, 742, 752, 761, 766, 777, 783, 795, 803, 817, 826, 834, 842, 849, 853, 863, 868, 879, 891, 901, 917, 926, 938, 953, 958, 976, 1000, 1011, 1021, 1030}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
