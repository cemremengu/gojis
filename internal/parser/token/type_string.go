// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[LineTerminator-1]
	_ = x[Whitespace-2]
	_ = x[MultiLineComment-3]
	_ = x[SingleLineComment-4]
	_ = x[CommonToken-5]
	_ = x[IdentifierName-6]
	_ = x[Punctuator-7]
	_ = x[StringLiteral-8]
	_ = x[TemplateHead-9]
	_ = x[TemplateMiddle-10]
	_ = x[TemplateTail-11]
	_ = x[NoSubstitutionTemplate-12]
	_ = x[Async-13]
	_ = x[Let-14]
	_ = x[Await-15]
	_ = x[Break-16]
	_ = x[Case-17]
	_ = x[Catch-18]
	_ = x[Class-19]
	_ = x[Const-20]
	_ = x[Continue-21]
	_ = x[Debugger-22]
	_ = x[Default-23]
	_ = x[Delete-24]
	_ = x[Do-25]
	_ = x[Else-26]
	_ = x[Export-27]
	_ = x[Extends-28]
	_ = x[Finally-29]
	_ = x[For-30]
	_ = x[Function-31]
	_ = x[If-32]
	_ = x[Import-33]
	_ = x[In-34]
	_ = x[Instanceof-35]
	_ = x[New_-36]
	_ = x[Return-37]
	_ = x[Static-38]
	_ = x[Super-39]
	_ = x[Switch-40]
	_ = x[This-41]
	_ = x[Throw-42]
	_ = x[Try-43]
	_ = x[Typeof-44]
	_ = x[Var-45]
	_ = x[Void-46]
	_ = x[While-47]
	_ = x[With-48]
	_ = x[Yield-49]
	_ = x[Enum-50]
	_ = x[Implements-51]
	_ = x[Package-52]
	_ = x[Protected-53]
	_ = x[Interface-54]
	_ = x[Private-55]
	_ = x[Public-56]
	_ = x[Null-57]
	_ = x[Boolean-58]
	_ = x[DecimalLiteral-59]
	_ = x[BinaryIntegerLiteral-60]
	_ = x[OctalIntegerLiteral-61]
	_ = x[HexIntegerLiteral-62]
	_ = x[RegularExpressionLiteral-63]
	_ = x[Target-64]
	_ = x[AndAssign-65]
	_ = x[Arrow-66]
	_ = x[Assign-67]
	_ = x[BitwiseAnd-68]
	_ = x[BitwiseNot-69]
	_ = x[BitwiseOr-70]
	_ = x[BitwiseXor-71]
	_ = x[BraceClose-72]
	_ = x[BraceOpen-73]
	_ = x[BracketClose-74]
	_ = x[BracketOpen-75]
	_ = x[Colon-76]
	_ = x[Comma-77]
	_ = x[Div-78]
	_ = x[DivAssign-79]
	_ = x[Dot-80]
	_ = x[Ellipsis-81]
	_ = x[Equals-82]
	_ = x[GreaterThan-83]
	_ = x[GreaterThanOrEqualTo-84]
	_ = x[LeftShift-85]
	_ = x[LeftShiftAssign-86]
	_ = x[LessThan-87]
	_ = x[LessThanOrEqualTo-88]
	_ = x[LogicalAnd-89]
	_ = x[LogicalNot-90]
	_ = x[LogicalOr-91]
	_ = x[Minus-92]
	_ = x[MinusAssign-93]
	_ = x[Modulo-94]
	_ = x[ModuloAssign-95]
	_ = x[Multiply-96]
	_ = x[MultiplyAssign-97]
	_ = x[NotEquals-98]
	_ = x[OrAssign-99]
	_ = x[ParClose-100]
	_ = x[ParOpen-101]
	_ = x[Plus-102]
	_ = x[PlusAssign-103]
	_ = x[Power-104]
	_ = x[PowerAssign-105]
	_ = x[QuestionMark-106]
	_ = x[RightShift-107]
	_ = x[RightShiftAssign-108]
	_ = x[SemiColon-109]
	_ = x[StrictEquals-110]
	_ = x[StrictNotEquals-111]
	_ = x[Tilde-112]
	_ = x[UnsignedRightShift-113]
	_ = x[UnsignedRightShiftAssign-114]
	_ = x[UpdateMinus-115]
	_ = x[UpdatePlus-116]
	_ = x[XorAssign-117]
}

const _Type_name = "UnknownLineTerminatorWhitespaceMultiLineCommentSingleLineCommentCommonTokenIdentifierNamePunctuatorStringLiteralTemplateHeadTemplateMiddleTemplateTailNoSubstitutionTemplateAsyncLetAwaitBreakCaseCatchClassConstContinueDebuggerDefaultDeleteDoElseExportExtendsFinallyForFunctionIfImportInInstanceofNew_ReturnStaticSuperSwitchThisThrowTryTypeofVarVoidWhileWithYieldEnumImplementsPackageProtectedInterfacePrivatePublicNullBooleanDecimalLiteralBinaryIntegerLiteralOctalIntegerLiteralHexIntegerLiteralRegularExpressionLiteralTargetAndAssignArrowAssignBitwiseAndBitwiseNotBitwiseOrBitwiseXorBraceCloseBraceOpenBracketCloseBracketOpenColonCommaDivDivAssignDotEllipsisEqualsGreaterThanGreaterThanOrEqualToLeftShiftLeftShiftAssignLessThanLessThanOrEqualToLogicalAndLogicalNotLogicalOrMinusMinusAssignModuloModuloAssignMultiplyMultiplyAssignNotEqualsOrAssignParCloseParOpenPlusPlusAssignPowerPowerAssignQuestionMarkRightShiftRightShiftAssignSemiColonStrictEqualsStrictNotEqualsTildeUnsignedRightShiftUnsignedRightShiftAssignUpdateMinusUpdatePlusXorAssign"

var _Type_index = [...]uint16{0, 7, 21, 31, 47, 64, 75, 89, 99, 112, 124, 138, 150, 172, 177, 180, 185, 190, 194, 199, 204, 209, 217, 225, 232, 238, 240, 244, 250, 257, 264, 267, 275, 277, 283, 285, 295, 299, 305, 311, 316, 322, 326, 331, 334, 340, 343, 347, 352, 356, 361, 365, 375, 382, 391, 400, 407, 413, 417, 424, 438, 458, 477, 494, 518, 524, 533, 538, 544, 554, 564, 573, 583, 593, 602, 614, 625, 630, 635, 638, 647, 650, 658, 664, 675, 695, 704, 719, 727, 744, 754, 764, 773, 778, 789, 795, 807, 815, 829, 838, 846, 854, 861, 865, 875, 880, 891, 903, 913, 929, 938, 950, 965, 970, 988, 1012, 1023, 1033, 1042}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
