// Code generated by "stringer -type=Type"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unknown-0]
	_ = x[LineTerminator-1]
	_ = x[Whitespace-2]
	_ = x[MultiLineComment-3]
	_ = x[SingleLineComment-4]
	_ = x[CommonToken-5]
	_ = x[IdentifierName-6]
	_ = x[Punctuator-7]
	_ = x[StringLiteral-8]
	_ = x[TemplateHead-9]
	_ = x[TemplateMiddle-10]
	_ = x[TemplateTail-11]
	_ = x[NoSubstitutionTemplate-12]
	_ = x[Async-13]
	_ = x[Let-14]
	_ = x[Asterisk-15]
	_ = x[Await-16]
	_ = x[Break-17]
	_ = x[Case-18]
	_ = x[Catch-19]
	_ = x[Class-20]
	_ = x[Const-21]
	_ = x[Continue-22]
	_ = x[Debugger-23]
	_ = x[Default-24]
	_ = x[Delete-25]
	_ = x[Do-26]
	_ = x[Else-27]
	_ = x[Export-28]
	_ = x[Extends-29]
	_ = x[Finally-30]
	_ = x[For-31]
	_ = x[Function-32]
	_ = x[Get-33]
	_ = x[If-34]
	_ = x[Import-35]
	_ = x[In-36]
	_ = x[Instanceof-37]
	_ = x[NewT-38]
	_ = x[Return-39]
	_ = x[Set-40]
	_ = x[Static-41]
	_ = x[Super-42]
	_ = x[Switch-43]
	_ = x[This-44]
	_ = x[Throw-45]
	_ = x[Try-46]
	_ = x[Typeof-47]
	_ = x[Var-48]
	_ = x[Void-49]
	_ = x[While-50]
	_ = x[With-51]
	_ = x[Yield-52]
	_ = x[Enum-53]
	_ = x[Implements-54]
	_ = x[Package-55]
	_ = x[Protected-56]
	_ = x[Interface-57]
	_ = x[Private-58]
	_ = x[Public-59]
	_ = x[Null-60]
	_ = x[Boolean-61]
	_ = x[DecimalLiteral-62]
	_ = x[BinaryIntegerLiteral-63]
	_ = x[OctalIntegerLiteral-64]
	_ = x[HexIntegerLiteral-65]
	_ = x[SignedInteger-66]
	_ = x[RegularExpressionBody-67]
	_ = x[RegularExpressionFlags-68]
	_ = x[Target-69]
	_ = x[AndAssign-70]
	_ = x[Arrow-71]
	_ = x[Assign-72]
	_ = x[BitwiseAnd-73]
	_ = x[BitwiseNot-74]
	_ = x[BitwiseOr-75]
	_ = x[BitwiseXor-76]
	_ = x[BraceClose-77]
	_ = x[BraceOpen-78]
	_ = x[BracketClose-79]
	_ = x[BracketOpen-80]
	_ = x[Colon-81]
	_ = x[Comma-82]
	_ = x[DivAssign-83]
	_ = x[Dot-84]
	_ = x[Ellipsis-85]
	_ = x[Equals-86]
	_ = x[ExclamationMark-87]
	_ = x[GreaterThan-88]
	_ = x[GreaterThanOrEqualTo-89]
	_ = x[LeftShift-90]
	_ = x[LeftShiftAssign-91]
	_ = x[LessThan-92]
	_ = x[LessThanOrEqualTo-93]
	_ = x[LogicalAnd-94]
	_ = x[LogicalOr-95]
	_ = x[Minus-96]
	_ = x[MinusAssign-97]
	_ = x[Modulo-98]
	_ = x[ModuloAssign-99]
	_ = x[MultiplyAssign-100]
	_ = x[NotEquals-101]
	_ = x[OrAssign-102]
	_ = x[ParClose-103]
	_ = x[ParOpen-104]
	_ = x[Plus-105]
	_ = x[PlusAssign-106]
	_ = x[Power-107]
	_ = x[PowerAssign-108]
	_ = x[QuestionMark-109]
	_ = x[RightShift-110]
	_ = x[RightShiftAssign-111]
	_ = x[SemiColon-112]
	_ = x[Slash-113]
	_ = x[StrictEquals-114]
	_ = x[StrictNotEquals-115]
	_ = x[Tilde-116]
	_ = x[UnsignedRightShift-117]
	_ = x[UnsignedRightShiftAssign-118]
	_ = x[UpdateMinus-119]
	_ = x[UpdatePlus-120]
	_ = x[XorAssign-121]
}

const _Type_name = "UnknownLineTerminatorWhitespaceMultiLineCommentSingleLineCommentCommonTokenIdentifierNamePunctuatorStringLiteralTemplateHeadTemplateMiddleTemplateTailNoSubstitutionTemplateAsyncLetAsteriskAwaitBreakCaseCatchClassConstContinueDebuggerDefaultDeleteDoElseExportExtendsFinallyForFunctionGetIfImportInInstanceofNewTReturnSetStaticSuperSwitchThisThrowTryTypeofVarVoidWhileWithYieldEnumImplementsPackageProtectedInterfacePrivatePublicNullBooleanDecimalLiteralBinaryIntegerLiteralOctalIntegerLiteralHexIntegerLiteralSignedIntegerRegularExpressionBodyRegularExpressionFlagsTargetAndAssignArrowAssignBitwiseAndBitwiseNotBitwiseOrBitwiseXorBraceCloseBraceOpenBracketCloseBracketOpenColonCommaDivAssignDotEllipsisEqualsExclamationMarkGreaterThanGreaterThanOrEqualToLeftShiftLeftShiftAssignLessThanLessThanOrEqualToLogicalAndLogicalOrMinusMinusAssignModuloModuloAssignMultiplyAssignNotEqualsOrAssignParCloseParOpenPlusPlusAssignPowerPowerAssignQuestionMarkRightShiftRightShiftAssignSemiColonSlashStrictEqualsStrictNotEqualsTildeUnsignedRightShiftUnsignedRightShiftAssignUpdateMinusUpdatePlusXorAssign"

var _Type_index = [...]uint16{0, 7, 21, 31, 47, 64, 75, 89, 99, 112, 124, 138, 150, 172, 177, 180, 188, 193, 198, 202, 207, 212, 217, 225, 233, 240, 246, 248, 252, 258, 265, 272, 275, 283, 286, 288, 294, 296, 306, 310, 316, 319, 325, 330, 336, 340, 345, 348, 354, 357, 361, 366, 370, 375, 379, 389, 396, 405, 414, 421, 427, 431, 438, 452, 472, 491, 508, 521, 542, 564, 570, 579, 584, 590, 600, 610, 619, 629, 639, 648, 660, 671, 676, 681, 690, 693, 701, 707, 722, 733, 753, 762, 777, 785, 802, 812, 821, 826, 837, 843, 855, 869, 878, 886, 894, 901, 905, 915, 920, 931, 943, 953, 969, 978, 983, 995, 1010, 1015, 1033, 1057, 1068, 1078, 1087}

func (i Type) String() string {
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
