// Code generated by "aststring"; DO NOT EDIT.
package ast

import "bytes"

func (node *Declaration) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("Declaration (")
	_, _ = buf.WriteString("\n")
	if node.HoistableDeclaration != nil {
		_, _ = buf.WriteString(PrefixToString(node.HoistableDeclaration.String(), "  "))
	}
	if node.ClassDeclaration != nil {
		_, _ = buf.WriteString(PrefixToString(node.ClassDeclaration.String(), "  "))
	}
	if node.LexicalDeclaration != nil {
		_, _ = buf.WriteString(PrefixToString(node.LexicalDeclaration.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *HoistableDeclaration) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("HoistableDeclaration (")
	_, _ = buf.WriteString("\n")
	if node.FunctionDeclaration != nil {
		_, _ = buf.WriteString(PrefixToString(node.FunctionDeclaration.String(), "  "))
	}
	if node.GeneratorDeclaration != nil {
		_, _ = buf.WriteString(PrefixToString(node.GeneratorDeclaration.String(), "  "))
	}
	if node.AsyncFunctionDeclaration != nil {
		_, _ = buf.WriteString(PrefixToString(node.AsyncFunctionDeclaration.String(), "  "))
	}
	if node.AsyncGeneratorDeclaration != nil {
		_, _ = buf.WriteString(PrefixToString(node.AsyncGeneratorDeclaration.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *FunctionDeclaration) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("FunctionDeclaration (")
	_, _ = buf.WriteString("\n")
	if node.BindingIdentifier != nil {
		_, _ = buf.WriteString(PrefixToString(node.BindingIdentifier.String(), "  "))
	}
	if node.FormalParameters != nil {
		_, _ = buf.WriteString(PrefixToString(node.FormalParameters.String(), "  "))
	}
	if node.FunctionBody != nil {
		_, _ = buf.WriteString(PrefixToString(node.FunctionBody.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *GeneratorDeclaration) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("GeneratorDeclaration (")
	_, _ = buf.WriteString("\n")
	if node.BindingIdentifier != nil {
		_, _ = buf.WriteString(PrefixToString(node.BindingIdentifier.String(), "  "))
	}
	if node.FormalParameters != nil {
		_, _ = buf.WriteString(PrefixToString(node.FormalParameters.String(), "  "))
	}
	if node.GeneratorBody != nil {
		_, _ = buf.WriteString(PrefixToString(node.GeneratorBody.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *VariableDeclarationList) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("VariableDeclarationList (")
	_, _ = buf.WriteString("\n")
	for _, elem := range node.VariableDeclarations {
		_, _ = buf.WriteString(PrefixToString(elem.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *VariableDeclaration) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("VariableDeclaration (")
	_, _ = buf.WriteString("\n")
	if node.BindingIdentifier != nil {
		_, _ = buf.WriteString(PrefixToString(node.BindingIdentifier.String(), "  "))
	}
	if node.BindingPattern != nil {
		_, _ = buf.WriteString(PrefixToString(node.BindingPattern.String(), "  "))
	}
	if node.Initializer != nil {
		_, _ = buf.WriteString(PrefixToString(node.Initializer.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *ForDeclaration) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("ForDeclaration (")
	_, _ = buf.WriteString("\n")
	if node.LetOrConst != nil {
		_, _ = buf.WriteString(PrefixToString(node.LetOrConst.String(), "  "))
	}
	if node.ForBinding != nil {
		_, _ = buf.WriteString(PrefixToString(node.ForBinding.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *LexicalDeclaration) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("LexicalDeclaration (")
	_, _ = buf.WriteString("\n")
	if node.LetOrConst != nil {
		_, _ = buf.WriteString(PrefixToString(node.LetOrConst.String(), "  "))
	}
	if node.BindingList != nil {
		_, _ = buf.WriteString(PrefixToString(node.BindingList.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *ClassDeclaration) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("ClassDeclaration (")
	_, _ = buf.WriteString("\n")
	if node.BindingIdentifier != nil {
		_, _ = buf.WriteString(PrefixToString(node.BindingIdentifier.String(), "  "))
	}
	if node.ClassTail != nil {
		_, _ = buf.WriteString(PrefixToString(node.ClassTail.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *AsyncFunctionDeclaration) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("AsyncFunctionDeclaration (")
	_, _ = buf.WriteString("\n")
	if node.BindingIdentifier != nil {
		_, _ = buf.WriteString(PrefixToString(node.BindingIdentifier.String(), "  "))
	}
	if node.AsyncFunctionBody != nil {
		_, _ = buf.WriteString(PrefixToString(node.AsyncFunctionBody.String(), "  "))
	}
	if node.FormalParameters != nil {
		_, _ = buf.WriteString(PrefixToString(node.FormalParameters.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *AsyncGeneratorDeclaration) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("AsyncGeneratorDeclaration (")
	_, _ = buf.WriteString("\n")
	if node.BindingIdentifier != nil {
		_, _ = buf.WriteString(PrefixToString(node.BindingIdentifier.String(), "  "))
	}
	if node.AsyncGeneratorBody != nil {
		_, _ = buf.WriteString(PrefixToString(node.AsyncGeneratorBody.String(), "  "))
	}
	if node.FormalParameters != nil {
		_, _ = buf.WriteString(PrefixToString(node.FormalParameters.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}
