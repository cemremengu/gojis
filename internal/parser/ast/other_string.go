// Code generated by "aststring"; DO NOT EDIT.
package ast

import (
	"bytes"
	"fmt"
)

func (node *Initializer) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("Initializer (")
	_, _ = buf.WriteString("\n")
	if node.AssignmentExpression != nil {
		_, _ = buf.WriteString(PrefixToString(node.AssignmentExpression.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *Elision) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("Elision (")
	_, _ = buf.WriteString("\n")
	_, _ = buf.WriteString(PrefixToString(fmt.Sprintf("%v: %v", "Commas", node.Commas), "  "))
	_, _ = buf.WriteString("\n")
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *SuperProperty) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("SuperProperty (")
	_, _ = buf.WriteString("\n")
	if node.Expression != nil {
		_, _ = buf.WriteString(PrefixToString(node.Expression.String(), "  "))
	}
	_, _ = buf.WriteString(PrefixToString(fmt.Sprintf("%v: %v", "IdentifierName", node.IdentifierName), "  "))
	_, _ = buf.WriteString("\n")
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *MetaProperty) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("MetaProperty (")
	_, _ = buf.WriteString("\n")
	if node.NewTarget != nil {
		_, _ = buf.WriteString(PrefixToString(node.NewTarget.String(), "  "))
	}
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *NewTarget) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("NewTarget (")
	_, _ = buf.WriteString("\n")
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *Arguments) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("Arguments (")
	_, _ = buf.WriteString("\n")
	if node.ArgumentList != nil {
		_, _ = buf.WriteString(PrefixToString(node.ArgumentList.String(), "  "))
	}
	_, _ = buf.WriteString(PrefixToString(fmt.Sprintf("%v: %v", "Comma", node.Comma), "  "))
	_, _ = buf.WriteString("\n")
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *ArgumentList) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("ArgumentList (")
	_, _ = buf.WriteString("\n")
	if node.AssignmentExpression != nil {
		_, _ = buf.WriteString(PrefixToString(node.AssignmentExpression.String(), "  "))
	}
	_, _ = buf.WriteString(PrefixToString(fmt.Sprintf("%v: %v", "Ellipsis", node.Ellipsis), "  "))
	_, _ = buf.WriteString("\n")
	if node.ArgumentList != nil {
		_, _ = buf.WriteString(PrefixToString(node.ArgumentList.String(), "  "))
	}
	_, _ = buf.WriteString(PrefixToString(fmt.Sprintf("%v: %v", "Comma", node.Comma), "  "))
	_, _ = buf.WriteString("\n")
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}

func (node *LetOrConst) String() string {
	var buf bytes.Buffer
	_, _ = buf.WriteString("LetOrConst (")
	_, _ = buf.WriteString("\n")
	_, _ = buf.WriteString(PrefixToString(fmt.Sprintf("%v: %v", "Let", node.Let), "  "))
	_, _ = buf.WriteString("\n")
	_, _ = buf.WriteString(PrefixToString(fmt.Sprintf("%v: %v", "Const", node.Const), "  "))
	_, _ = buf.WriteString("\n")
	_, _ = buf.WriteString(")")
	_, _ = buf.WriteString("\n")
	return buf.String()
}
